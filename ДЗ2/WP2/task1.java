//Задание №1
//Разработайте модульный тест Java для проверки, что общая стоимость корзины с разными товарами корректно рассчитывается 
//Ожидаемый результат: Стоимость корзины посчиталась корректно

// Для написания модульного теста Java для проверки корректности расчета общей стоимости корзины с разными товарами, можно использовать фреймворк для тестирования JUnit. 
// Необходимо создать объект класса Cart и добавить в него несколько продуктов с заданными ценами и количествами. 
// Затем нужно проверить, что общая стоимость корректно рассчитывается.

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CartTest {

    @Test
    public void testCalculateTotalPrice() {
        // Создаем объект корзины
        Cart cart = new Cart();

        // Создаем несколько продуктов и добавляем их в корзину
        Product product1 = new Product(1, "Product 1", 10.0, 2);
        Product product2 = new Product(2, "Product 2", 15.0, 3);
        Product product3 = new Product(3, "Product 3", 5.0, 1);

        cart.addProductToCart(product1);
        cart.addProductToCart(product2);
        cart.addProductToCart(product3);

        // Рассчитываем ожидаемую общую стоимость
        double expectedTotalPrice = (10.0 * 2) + (15.0 * 3) + (5.0 * 1);

        // Получаем фактическую общую стоимость из корзины
        double actualTotalPrice = cart.calculateTotalPrice();

        // Проверяем, что фактическая и ожидаемая стоимости совпадают
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // Второй аргумент - допустимая погрешность
    }
}

// Тест создает объект корзины, добавляет в нее несколько продуктов и затем проверяет, 
// что фактическая общая стоимость, рассчитанная методом calculateTotalPrice, соответствует ожидаемой общей стоимости.

// Классы Cart, Product, и assertEquals нужно импортировать из соответствующих пакетов. 
// Второй аргумент assertEquals - это допустимая погрешность, которая позволяет учесть округления при сравнении чисел с плавающей точкой. 
// Погрешность установлена на 0.01, что означает, что значения считаются равными, если они различаются менее чем на 0.01. 
// Точность настраивается.