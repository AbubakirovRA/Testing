// Задание №2
// Создайте модульный тест для проверки, что общая стоимость корзины с множественными
// экземплярами одного и того же продукта корректно рассчитывается.

// Ожидаемый результат: Стоимость корзины посчиталась корректно

// Модульный тест, проверяет, что общая стоимость корзины с множественными экземплярами одного и того же продукта рассчитывается корректно. 
// Используется фреймворк тестирования JUnit. 
// Создайтся объект корзины, в нее добавляются несколько экземпляров одного и того же продукта.
// Проверяем, что общая стоимость корректно рассчитывается. 

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CartTest {

    @Test
    public void testCalculateTotalPriceWithMultipleInstancesOfProduct() {
        // Создаем объект корзины
        Cart cart = new Cart();

        // Создаем продукт
        Product product = new Product(1, "Product 1", 10.0, 3); // Три экземпляра одного и того же продукта

        // Добавляем продукт в корзину несколько раз
        cart.addProductToCart(product);
        cart.addProductToCart(product);
        cart.addProductToCart(product);

        // Рассчитываем ожидаемую общую стоимость
        double expectedTotalPrice = (10.0 * 3);

        // Получаем фактическую общую стоимость из корзины
        double actualTotalPrice = cart.calculateTotalPrice();

        // Проверяем, что фактическая и ожидаемая стоимости совпадают
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // Второй аргумент - допустимая погрешность
    }
}

// Тест создает объект корзины, добавляет в нее продукт три раза и затем проверяет, 
// что фактическая общая стоимость, рассчитанная методом calculateTotalPrice, 
//  соответствует ожидаемой общей стоимости.

// Как и в предыдущем примере, используем assertEquals допустимой погрешностью для сравнения значений с плавающей точкой
// и импортирование необходимых классов из соответствующих пакетов.