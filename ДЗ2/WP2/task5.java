// Задание №5
// Создайте модульный тест для проверки, что если пользователь забирает все имеющиеся
// продукты определенного типа из магазина, эти продукты больше не доступны для заказа.

// Ожидаемый результат: Больше такой продукт
// заказать нельзя, он не появляется на полке


// Модульный тест проверяет, что если пользователь забирает все имеющиеся продукты определенного типа из магазина, 
// эти продукты больше не доступны для заказа. 
// Фреймворк тестирования - JUnit. 

// Создаем объекты магазина и корзины, добавляем продукты в магазин, а затем удаляем все имеющиеся продукты этого типа из корзины. 
// Проверяем, что такой продукт больше недоступен для заказа в магазине.

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ShopTest {

    @Test
    public void testProductAvailabilityAfterAllAreTakenFromShop() {
        // Создаем объект магазина
        Shop shop = new Shop();

        // Создаем продукты
        Product product1 = new Product(1, "Product 1", 10.0, 5); // Начальное количество в магазине: 5 шт.
        Product product2 = new Product(2, "Product 2", 15.0, 3); // Начальное количество в магазине: 3 шт.

        // Добавляем продукты в магазин
        shop.addProduct(product1);
        shop.addProduct(product2);

        // Создаем объект корзины
        Cart cart = new Cart();

        // Добавляем все имеющиеся продукты определенного типа в корзину
        cart.addProductToCart(product1, 5);

        // Удаляем все продукты этого типа из корзины
        cart.removeProductByID(1, 5);

        // Проверяем, что продукты этого типа больше не доступны для заказа в магазине
        assertFalse(shop.isProductAvailable(product1));

        // Проверяем, что другие продукты того же типа (если есть) остаются доступными
        assertTrue(shop.isProductAvailable(product2));
    }
}

// Тест создает объект магазина и продуктов, добавляет продукты в магазин, 
// создает объект корзины и добавляет все имеющиеся продукты определенного типа в корзину, а затем удаляет их из корзины. 
// После этого он проверяет, что продукты этого типа больше не доступны для заказа в магазине, используя метод isProductAvailable.