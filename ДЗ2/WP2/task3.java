// Задание №3
// Напишите модульный тест для проверки, что при удалении товара из
// корзины происходит перерасчет общей стоимости корзины.

// Ожидаемый результат: Вызывается метод пересчета стоимости
// корзины, стоимость корзины меняется


// Модульный тест проверяет, что при удалении товара из корзины происходит перерасчет общей стоимости корзины.
// Используем фреймворк для тестирования JUnit. 
// Создаем объект корзины, добавляем несколько продуктов, убераем один из продуктов, далее проверяем, 
// что метод пересчета стоимости корзины вызывается и стоимость корзины меняется.

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class CartTest {

    @Test
    public void testRecalculateTotalPriceAfterRemovingProduct() {
        // Создаем объект корзины
        Cart cart = new Cart();

        // Создаем продукты
        Product product1 = new Product(1, "Product 1", 10.0, 2);
        Product product2 = new Product(2, "Product 2", 15.0, 3);

        // Добавляем продукты в корзину
        cart.addProductToCart(product1);
        cart.addProductToCart(product2);

        // Создаем заглушку (mock) для корзины, чтобы отслеживать вызов метода пересчета
        Cart spyCart = spy(cart);

        // Удаляем один из продуктов из корзины
        spyCart.removeProductByID(1);

        // Проверяем, что метод пересчета стоимости корзины вызывается
        verify(spyCart, times(1)).recalculateTotalPrice();

        // Рассчитываем ожидаемую общую стоимость после удаления продукта
        double expectedTotalPrice = 15.0 * 3;

        // Получаем фактическую общую стоимость из корзины
        double actualTotalPrice = spyCart.calculateTotalPrice();

        // Проверяем, что фактическая и ожидаемая стоимости совпадают
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // Второй аргумент - допустимая погрешность
    }
}

// В тесте создается объект корзины, добавляются продукты, а затем один из продуктов удаляется из корзины. 
// Используем заглушку (mock) для корзины с помощью библиотеки Mockito, чтобы отследить, 
// вызывается ли метод recalculateTotalPrice после удаления продукта. 
// Затем сравниваем фактическую и ожидаемую стоимость корзины.

// Необходимо в код добавить зависимость на библиотеку Mockito, чтобы использовать заглушку.