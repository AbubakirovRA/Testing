// Задание №11 
// Предложите способ оптимизировать тестовый класс:

// 1.@BeforeALL (Class Level Setup) --> 2.@BeforeEach (Setup) --> 3.@Test (Test Execution)  --> 4.@AfterEach (Cleanup) --> 5.@AfterAll (Class Level Cleanup)
На шаге 4 идет возврат на шаг 2 для повтора

// Для оптимизации тестового класса, чтобы избежать повторяющегося возврата на шаг 2 после шага 4, используем параметризованные тесты с JUnit 5. 
// Это позволит вам создать набор входных данных и выполнять тесты с разными наборами данных без необходимости повторять шаги подготовки и очистки для каждого теста.


1. @BeforeAll (Class Level Setup) --> 2. @BeforeEach (Setup) --> 3. @Test (Test Execution)  -- > 4. @AfterEach (Cleanup) --> 5. Возврат к шагу 3 для следующего параметра (повторение теста с новыми данными) --> 6. @AfterAll (Class Level Cleanup)

Отличие заключается в добавлении шага 5, который представляет повторение теста с новыми данными (в данном случае, параметризованный тест). 
После проверки работоспособности теста с одним набором данных, он повторяется с другими данными, и это может продолжаться многократно, как указано в задании.